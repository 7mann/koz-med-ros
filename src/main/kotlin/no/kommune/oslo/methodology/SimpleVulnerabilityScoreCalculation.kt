package no.kommune.oslo.methodology

import no.kommune.oslo.model.SeverityLevels
import no.kommune.oslo.model.SeverityLevels.NONE
import no.kommune.oslo.model.Vulnerability
import org.apache.logging.log4j.LogManager


object SimpleVulnerabilityScoreCalculation : VulnerabilityScoreCalculation {
    private val logger = LogManager.getLogger(javaClass)

    override fun calculateVulnerability(vulnerability: Vulnerability,
                                        threatPresence: SeverityLevels,
                                        riskTreatment: SeverityLevels): SeverityLevels {

        if (vulnerability.exploitedByThreats.isEmpty()) {
            logger.debug("No exploiting threats, setting Severity Level to $NONE")
            return NONE
        }
        if (threatPresence == NONE) {
            logger.debug("$threatPresence threat presence, setting Severity Level to $NONE")
            return NONE
        }

        // Average threat presence with vulnerability score
        var calculatedVulnerability = (vulnerability.vulnerabilityPotential.severityLevelValue + threatPresence.severityLevelValue) / 2
        logger.debug("threatPresenceScore: $threatPresence, " +
                "vulnerabilityPotential: ${vulnerability.vulnerabilityPotential.severityLevelValue}, " +
                "calculated existing vulnerability $calculatedVulnerability")

        if (riskTreatment == NONE) {
            logger.debug("No risk treatments, vulnerability potential (${vulnerability.vulnerabilityPotential}) is not reduced.")
            return SeverityLevels.roundSeverityLevel(calculatedVulnerability)
        }

        calculatedVulnerability -= riskTreatment.severityLevelValue //reduce vulnerability potential
        if (calculatedVulnerability < 0) {
            logger.debug("Negative vulnerability score ($calculatedVulnerability) not allowed. Setting calculated vulnerability to 0.")
            calculatedVulnerability = 0// Do not allow negative numbers
        }

        return SeverityLevels.roundSeverityLevel(calculatedVulnerability)
    }
}