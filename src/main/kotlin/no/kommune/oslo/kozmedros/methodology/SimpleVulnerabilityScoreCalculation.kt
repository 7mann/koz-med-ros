package no.kommune.oslo.kozmedros.methodology

import no.kommune.oslo.kozmedros.model.Vulnerability
import no.kommune.oslo.kozmedros.model.enums.SeverityLevel
import no.kommune.oslo.kozmedros.model.enums.SeverityLevel.NONE
import no.kommune.oslo.kozmedros.model.enums.SeverityLevel.NOT_EVALUATED
import org.apache.logging.log4j.LogManager


object SimpleVulnerabilityScoreCalculation : VulnerabilityScoreCalculation {
    private val logger = LogManager.getLogger(javaClass)

    override fun calculateVulnerability(vulnerability: Vulnerability,
                                        threatPresence: SeverityLevel,
                                        riskTreatment: SeverityLevel): SeverityLevel {

        if (threatPresence == NONE) {
            logger.debug("$threatPresence threat presence, setting Severity Level to $NONE")
            return NONE
        }

        // Average threat presence with vulnerability score
        var vulnerabilityPotential = if (vulnerability.vulnerabilityPotential == NOT_EVALUATED) 0 else {
            vulnerability.vulnerabilityPotential.severityLevelValue
        }
        var calculatedVulnerability = (vulnerabilityPotential + threatPresence.severityLevelValue) / 2
        logger.debug("threatPresenceScore: $threatPresence=${threatPresence.severityLevelValue}, " +
                "vulnerabilityPotential: ${vulnerabilityPotential}=${vulnerability.vulnerabilityPotential.severityLevelValue}, " +
                "calculated existing vulnerability $calculatedVulnerability")

        if (riskTreatment == NONE) {
            logger.debug("No risk treatments, vulnerability potential (${vulnerabilityPotential}) is not reduced.")
            return SeverityLevel.roundSeverityLevel(calculatedVulnerability)
        }

        calculatedVulnerability -= riskTreatment.severityLevelValue //reduce vulnerability potential
        if (calculatedVulnerability < 0) {
            logger.debug("Negative vulnerability score ($calculatedVulnerability) not allowed. Setting calculated vulnerability to 0.")
            calculatedVulnerability = 0// Do not allow negative numbers
        }

        return SeverityLevel.roundSeverityLevel(calculatedVulnerability)
    }
}