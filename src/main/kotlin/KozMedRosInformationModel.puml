@startuml
title \nKoz-Med-Ros Information Model\n\n
skinparam class {
    BackgroundColor<<TODO>> Pink
    BorderColor<<TODO>> Tomato
}
skinparam stereotypeCBackgroundColor<<TODO>> LightGray

note as N0
    <size:16>Class types according to DDD</size>
    <size:8> </size>
    <b>A</b> - Aggregate
    <b>E</b> - Entity
    <b>F</b> - Factory
    <b>R</b> - Repository
    <b>S</b> - Service
    <b>V</b> - Value Objects
end note
note as N1
    <b>There is a design choice to reduce number of
    <b>many-to-many and bi-directional releationships.

    To cite Eric Evans in Domain-driven Design:
    <i>In real life there are lots of mant-to-many
    <i>associations, and a great number of them are
    <i>naturally bidirectional.
    <i>The same tends to be true of early forms of
    <i>a model as we brainstorm and explore the domain.
    <i>But these general associations complicate
    <i>implementation and maintenance.
    <i>Further, they communicate very little about the
    <i>true nature of the releationship.</i>
end note

class Asset <<(V,DeepSkyBlue)>> {
  AssetValue
  Classification
}
note left of Asset : An Asset can be used by\nseveral DataProcessing,\nbut the model choose to\nsimplify this aspect

class AssetValue <<(V,DeepSkyBlue)>>
hide AssetValue

enum AssetValueTypes {
    CONFIDENCIALITYVALUE
    INTEGRITYVALUE
    AVAILABILITYVALUE
}
hide AssetValueTypes

class DataProcessingOverview <<(E,plum)TODO>>
class DataProcessing <<(E,plum)TODO>>
{
    DataProcessingPurpose
    LegalBasis
}
note right: Implementing\nDataProcessingPurpose\nand LegalBasis as\nproperties is a model\nsimplification

class DataProcessingPurpose <<(V,DeepSkyBlue)TODO>>
hide DataProcessingPurpose
class LegalBasis <<(V,DeepSkyBlue)TODO>>
hide LegalBasis
class Organization <<(A,Palegreen)TODO>>
class OrganizationRiskProfile <<(A,Palegreen)TODO>>
class OrganizationRiskOwner <<(V,DeepSkyBlue)TODO>>
class RiskAnalysisSubject <<(A,Palegreen)TODO>>
note left of RiskAnalysisSubject : The subject matter\nof the risk analysis.\nE.g a software product
class Risk <<(E,plum)>>
{
    RiskAppetite
}
class RiskScenario <<(V,DeepSkyBlue)>>
class RiskScenarioLibrary <<(V,DeepSkyBlue)TODO>>
note right: A library containing risk scenarios\ will simplify and\nmake risk analysis more relevant

class RiskScenarioLibraryRepository <<(R,Yellow)TODO>>
class RiskAnalysis <<(E,plum)TODO>>
class RiskAppetite <<(V,DeepSkyBlue)>>
hide RiskAppetite

class RiskAnalysisOwner <<(V,DeepSkyBlue)TODO>>
class RiskOwner <<(V,DeepSkyBlue)TODO>>
interface RiskItem
class RiskTreatment <<(V,DeepSkyBlue)>> {
    RiskTreatmentStatus
    RiskTreatmentTypes
}
enum RiskTreatmentStatus {
    EXISTING
    PLANNED
    IMPLEMENTED
}
hide RiskTreatmentStatus

enum RiskTreatmentTypes {
    PROBABILITY_RISK_TREATMENT
    CONSEQUENCE_RISK_TREATMENT
}
hide RiskTreatmentTypes

enum SeverityLevels {
    NONE
    INSIGNIFICANT
    LOW
    MODERATE
    HIGH
    EXTREME
    INVALID
}
hide SeverityLevels

class Threat <<(V,DeepSkyBlue)>> {
    ThreatTypes
    ThreatAgent
}
note left: Implementing ThreatTypes\nand ThreatAgent as properties\nis a model simplification

class ThreatLibrary <<(V,DeepSkyBlue)TODO>> {
    RiskTreatment
    Threat
    ThreatAgent
    Vulnerability
}
note left: A library containing threats, \nthreat agents, and exploted\nvulnerabilities will simplify and\nmake risk analysis more relevant

class ThreatLibraryRepository <<(R,YELLOW)TODO>>
class ThreatAgent <<(V,DeepSkyBlue)>>
hide ThreatAgent
enum ThreatAgentType {
    HUMAN
    ENVIRONMENTAL
}
hide ThreatAgentType

enum ThreatTypes {
    DELIBERATE
    ACCIDENTAL
    ENVIRONMENTAL
}
hide ThreatTypes

class Vulnerability <<(V,DeepSkyBlue)>> {
    exploitedByVulnerability
}

'------ Relations --------
Organization "1" -> "1" OrganizationRiskProfile : has a >
Organization o--> Organization
note left of Organization : An Organization can\nhave sub-Organizations

Organization "1" --> "1" DataProcessingOverview : has a >
DataProcessingOverview "1" --> "*" DataProcessing : contains >
DataProcessing "1" --> "*" Asset : contains >

OrganizationRiskProfile "1" o--> "*" RiskAnalysisSubject : contains\nseveral >
RiskAnalysisSubject "1" o--> "*" RiskAnalysis : has >
OrganizationRiskProfile  -> OrganizationRiskOwner : has an >
RiskAnalysis "1" o--> "*" RiskAnalysis
note bottom on link :The recursive relationship\nis to enable analysis\nbased on collection of\nother analysis
RiskAnalysis "1" o--> "*" Risk : analyze >
RiskAnalysis -> RiskAnalysisOwner : has a >
OrganizationRiskOwner ---|> RiskOwner : is a >
RiskOwner <|--  RiskAnalysisOwner :is a <
Risk "1" o--> "*" Asset :contains >
Risk "1" o--> "*" Threat :threaten by >
note as N2
    Should this relation
    be present?
    Yes, to complete the
    threat landscape
end note
Risk . N2
N2 . Threat

Risk "1" o--> "*" Vulnerability :exposed by >
Risk "1" o--> "*" RiskTreatment :reduced by >
Risk "1" o--> "1" RiskScenario
RiskScenario <.. RiskScenarioLibrary : provides <
RiskScenarioLibrary "1" ..> "1" RiskScenarioLibraryRepository : reads/\nwrites >


Asset ..|> RiskItem :is a >
Vulnerability ..|> RiskItem :is a >
RiskTreatment ..|> RiskItem :is a >
Threat ..|> RiskItem :is a >
Threat <... ThreatLibrary : provides <
Vulnerability <... ThreatLibrary : provides <
RiskTreatment <... ThreatLibrary : provides <
ThreatLibrary "1" ..> "1" ThreatLibraryRepository : reads/\nwrites >

Vulnerability "0..*" -left- "0..1" Threat : exploited by >

newpage
title \nKoz-Med-Ros Information Model - Factories and related objects\n\n
skinparam class {
    BackgroundColor<<TODO>> Pink
    BorderColor<<TODO>> Tomato
}
skinparam stereotypeCBackgroundColor<<TODO>> LightGray
class RiskAnalysisFactory <<(F,Gold)>>
class Risk <<(E,plum)>>
class RiskAnalysis <<(E,plum)TODO>>

RiskAnalysisFactory .. RiskAnalysis : creates >
RiskAnalysisFactory .. Risk : populates >



hide empty members
@enduml