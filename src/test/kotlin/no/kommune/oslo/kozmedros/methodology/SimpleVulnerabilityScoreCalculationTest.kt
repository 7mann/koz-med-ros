package no.kommune.oslo.kozmedros.methodology

import no.kommune.oslo.kozmedros.model.Vulnerability
import no.kommune.oslo.kozmedros.model.enums.SeverityLevel.*
import no.kommune.oslo.kozmedros.model.enums.VulnerabilityType.TECHNICAL
import org.apache.logging.log4j.LogManager
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class SimpleVulnerabilityScoreCalculationTest {
    private val logger = LogManager.getLogger(javaClass)

    @Test
    fun `Expect calculated vulnerability NONE without any exploiting threats`() {
        val vulnerability = Vulnerability(
                vulnerabilityType = TECHNICAL,
                vulnerabilityDescription = "Test vulnerability 1",
                vulnerabilityPotential = HIGH,
                reference = "Test"
        )
        val valScore = SimpleVulnerabilityScoreCalculation.calculateVulnerability(
                vulnerability = vulnerability,
                threatPresence = NONE,
                riskTreatment = LOW
        )
        assertThat(valScore).isEqualTo(NONE)
        logger.debug("valScore: $valScore")
    }


    @Test
    fun `Expect calculated vulnerability MODERATE with EXTREME threat presence and LOW risk treatment`() {
        val vulnerability = Vulnerability(
                vulnerabilityType = TECHNICAL,
                vulnerabilityDescription = "Test vulnerability 1",
                vulnerabilityPotential = HIGH,
                reference = "Test"
        )
        val valScore = SimpleVulnerabilityScoreCalculation.calculateVulnerability(
                vulnerability = vulnerability,
                threatPresence = EXTREME,
                riskTreatment = LOW
        )
        assertThat(valScore).isEqualTo(MODERATE)
        logger.debug("valScore: $valScore")
    }
}